
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 29 17:33:39 BRT 2016
//----------------------------------------------------

package modelo;

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 29 17:33:39 BRT 2016
  */
public class MiniJavaParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MiniJavaParser() {super();}

  /** Constructor which sets the default scanner. */
  public MiniJavaParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MiniJavaParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\004\000\002\021" +
    "\004\000\002\021\002\000\002\003\023\000\002\004\010" +
    "\000\002\004\012\000\002\022\004\000\002\022\002\000" +
    "\002\005\005\000\002\023\004\000\002\023\002\000\002" +
    "\006\015\000\002\024\004\000\002\024\002\000\002\025" +
    "\004\000\002\025\003\000\002\026\004\000\002\026\005" +
    "\000\002\007\004\000\002\010\005\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\011\005\000\002" +
    "\011\011\000\002\011\007\000\002\011\007\000\002\011" +
    "\006\000\002\011\011\000\002\012\004\000\002\034\005" +
    "\000\002\034\002\000\002\013\004\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\002\000\002" +
    "\014\004\000\002\032\005\000\002\032\005\000\002\032" +
    "\002\000\002\015\004\000\002\033\005\000\002\033\005" +
    "\000\002\033\002\000\002\016\004\000\002\016\004\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\007\000\002\016\005\000\002\016" +
    "\006\000\002\016\003\000\002\017\004\000\002\017\004" +
    "\000\002\017\007\000\002\017\006\000\002\030\006\000" +
    "\002\030\003\000\002\027\004\000\002\027\005\000\002" +
    "\027\002\000\002\020\003\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\004\037\005\001\002\000\006\002\ufffe\037" +
    "\205\001\002\000\004\027\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\031\011\001" +
    "\002\000\004\040\012\001\002\000\004\041\013\001\002" +
    "\000\004\042\014\001\002\000\004\043\015\001\002\000" +
    "\004\015\016\001\002\000\004\044\017\001\002\000\004" +
    "\033\020\001\002\000\004\034\021\001\002\000\004\027" +
    "\022\001\002\000\004\017\023\001\002\000\004\031\024" +
    "\001\002\000\014\006\030\027\025\031\032\051\027\052" +
    "\031\001\002\000\006\026\172\033\173\001\002\000\004" +
    "\032\170\001\002\000\004\015\164\001\002\000\004\015" +
    "\156\001\002\000\004\015\037\001\002\000\016\006\030" +
    "\027\025\031\032\032\ufff3\051\027\052\031\001\002\000" +
    "\016\006\030\027\025\031\032\032\ufff3\051\027\052\031" +
    "\001\002\000\004\032\035\001\002\000\022\005\uffe9\006" +
    "\uffe9\027\uffe9\031\uffe9\032\uffe9\047\uffe9\051\uffe9\052\uffe9" +
    "\001\002\000\004\032\ufff4\001\002\000\026\012\040\015" +
    "\055\027\046\035\056\050\045\054\042\055\051\056\041" +
    "\057\044\060\050\001\002\000\026\012\040\015\055\027" +
    "\046\035\056\050\045\054\042\055\051\056\041\057\044" +
    "\060\050\001\002\000\006\016\073\030\074\001\002\000" +
    "\032\004\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\017\uffd1\020\uffd1\022\uffd1\025\uffd1\034\uffd1\036\uffd1\001" +
    "\002\000\022\004\uffdc\014\uffdc\017\uffdc\020\142\022\144" +
    "\025\145\034\uffdc\036\uffdc\001\002\000\032\004\uffce\010" +
    "\uffce\011\uffce\012\uffce\013\uffce\014\uffce\017\uffce\020\uffce" +
    "\022\uffce\025\uffce\034\uffce\036\uffce\001\002\000\032\004" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\017\uffcf" +
    "\020\uffcf\022\uffcf\025\uffcf\034\uffcf\036\uffcf\001\002\000" +
    "\006\016\073\030\074\001\002\000\036\004\uffca\010\uffca" +
    "\011\uffca\012\uffca\013\uffca\014\uffca\017\uffca\020\uffca\022" +
    "\uffca\025\uffca\030\135\033\134\034\uffca\036\uffca\001\002" +
    "\000\006\027\124\050\125\001\002\000\032\004\uffd0\010" +
    "\uffd0\011\uffd0\012\uffd0\013\uffd0\014\uffd0\017\uffd0\020\uffd0" +
    "\022\uffd0\025\uffd0\034\uffd0\036\uffd0\001\002\000\032\004" +
    "\uffd4\010\117\011\uffd4\012\uffd4\013\115\014\uffd4\017\uffd4" +
    "\020\uffd4\022\uffd4\025\uffd4\034\uffd4\036\uffd4\001\002\000" +
    "\004\017\113\001\002\000\014\004\107\014\uffe1\017\uffe1" +
    "\034\uffe1\036\uffe1\001\002\000\026\012\040\015\055\027" +
    "\046\035\056\050\045\054\042\055\051\056\041\057\044" +
    "\060\050\001\002\000\026\012\040\015\055\027\046\035" +
    "\056\050\045\054\042\055\051\056\041\057\044\060\050" +
    "\001\002\000\026\004\uffd8\011\061\012\062\014\uffd8\017" +
    "\uffd8\020\uffd8\022\uffd8\025\uffd8\034\uffd8\036\uffd8\001\002" +
    "\000\022\004\uffdb\014\uffdb\017\uffdb\020\uffdb\022\uffdb\025" +
    "\uffdb\034\uffdb\036\uffdb\001\002\000\026\012\040\015\055" +
    "\027\046\035\056\050\045\054\042\055\051\056\041\057" +
    "\044\060\050\001\002\000\026\012\040\015\055\027\046" +
    "\035\056\050\045\054\042\055\051\056\041\057\044\060" +
    "\050\001\002\000\026\004\uffd8\011\061\012\062\014\uffd8" +
    "\017\uffd8\020\uffd8\022\uffd8\025\uffd8\034\uffd8\036\uffd8\001" +
    "\002\000\022\004\uffd9\014\uffd9\017\uffd9\020\uffd9\022\uffd9" +
    "\025\uffd9\034\uffd9\036\uffd9\001\002\000\026\004\uffd8\011" +
    "\061\012\062\014\uffd8\017\uffd8\020\uffd8\022\uffd8\025\uffd8" +
    "\034\uffd8\036\uffd8\001\002\000\022\004\uffda\014\uffda\017" +
    "\uffda\020\uffda\022\uffda\025\uffda\034\uffda\036\uffda\001\002" +
    "\000\032\004\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3\014" +
    "\uffd3\017\uffd3\020\uffd3\022\uffd3\025\uffd3\034\uffd3\036\uffd3" +
    "\001\002\000\004\017\071\001\002\000\006\016\073\030" +
    "\074\001\002\000\036\004\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\013\uffc6\014\uffc6\017\uffc6\020\uffc6\022\uffc6\025\uffc6\030" +
    "\uffc6\033\uffc6\034\uffc6\036\uffc6\001\002\000\036\004\uffc4" +
    "\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\017\uffc4\020" +
    "\uffc4\022\uffc4\025\uffc4\030\uffc4\033\uffc4\034\uffc4\036\uffc4" +
    "\001\002\000\004\027\075\001\002\000\010\015\077\016" +
    "\uffc1\030\uffc1\001\002\000\006\016\073\030\074\001\002" +
    "\000\030\012\040\015\055\017\102\027\046\035\056\050" +
    "\045\054\042\055\051\056\041\057\044\060\050\001\002" +
    "\000\004\017\105\001\002\000\006\017\uffc0\036\103\001" +
    "\002\000\006\016\uffc3\030\uffc3\001\002\000\026\012\040" +
    "\015\055\027\046\035\056\050\045\054\042\055\051\056" +
    "\041\057\044\060\050\001\002\000\004\017\uffbf\001\002" +
    "\000\006\016\uffc2\030\uffc2\001\002\000\036\004\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\017\uffc5\020\uffc5" +
    "\022\uffc5\025\uffc5\030\uffc5\033\uffc5\034\uffc5\036\uffc5\001" +
    "\002\000\026\012\040\015\055\027\046\035\056\050\045" +
    "\054\042\055\051\056\041\057\044\060\050\001\002\000" +
    "\012\014\uffe3\017\uffe3\034\uffe3\036\uffe3\001\002\000\014" +
    "\004\107\014\uffe1\017\uffe1\034\uffe1\036\uffe1\001\002\000" +
    "\012\014\uffe2\017\uffe2\034\uffe2\036\uffe2\001\002\000\004" +
    "\014\114\001\002\000\022\005\uffe6\006\uffe6\027\uffe6\031" +
    "\uffe6\032\uffe6\047\uffe6\051\uffe6\052\uffe6\001\002\000\026" +
    "\012\040\015\055\027\046\035\056\050\045\054\042\055" +
    "\051\056\041\057\044\060\050\001\002\000\026\004\uffd7" +
    "\011\uffd7\012\uffd7\014\uffd7\017\uffd7\020\uffd7\022\uffd7\025" +
    "\uffd7\034\uffd7\036\uffd7\001\002\000\026\012\040\015\055" +
    "\027\046\035\056\050\045\054\042\055\051\056\041\057" +
    "\044\060\050\001\002\000\032\004\uffd4\010\117\011\uffd4" +
    "\012\uffd4\013\115\014\uffd4\017\uffd4\020\uffd4\022\uffd4\025" +
    "\uffd4\034\uffd4\036\uffd4\001\002\000\026\004\uffd6\011\uffd6" +
    "\012\uffd6\014\uffd6\017\uffd6\020\uffd6\022\uffd6\025\uffd6\034" +
    "\uffd6\036\uffd6\001\002\000\032\004\uffd4\010\117\011\uffd4" +
    "\012\uffd4\013\115\014\uffd4\017\uffd4\020\uffd4\022\uffd4\025" +
    "\uffd4\034\uffd4\036\uffd4\001\002\000\026\004\uffd5\011\uffd5" +
    "\012\uffd5\014\uffd5\017\uffd5\020\uffd5\022\uffd5\025\uffd5\034" +
    "\uffd5\036\uffd5\001\002\000\004\015\131\001\002\000\004" +
    "\033\126\001\002\000\026\012\040\015\055\027\046\035" +
    "\056\050\045\054\042\055\051\056\041\057\044\060\050" +
    "\001\002\000\004\034\130\001\002\000\032\004\uffcd\010" +
    "\uffcd\011\uffcd\012\uffcd\013\uffcd\014\uffcd\017\uffcd\020\uffcd" +
    "\022\uffcd\025\uffcd\034\uffcd\036\uffcd\001\002\000\004\017" +
    "\132\001\002\000\006\016\073\030\074\001\002\000\036" +
    "\004\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\017" +
    "\uffc7\020\uffc7\022\uffc7\025\uffc7\030\uffc7\033\uffc7\034\uffc7" +
    "\036\uffc7\001\002\000\026\012\040\015\055\027\046\035" +
    "\056\050\045\054\042\055\051\056\041\057\044\060\050" +
    "\001\002\000\004\053\136\001\002\000\032\004\uffcc\010" +
    "\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\017\uffcc\020\uffcc" +
    "\022\uffcc\025\uffcc\034\uffcc\036\uffcc\001\002\000\004\034" +
    "\140\001\002\000\032\004\uffcb\010\uffcb\011\uffcb\012\uffcb" +
    "\013\uffcb\014\uffcb\017\uffcb\020\uffcb\022\uffcb\025\uffcb\034" +
    "\uffcb\036\uffcb\001\002\000\036\004\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\014\uffc9\017\uffc9\020\uffc9\022\uffc9\025" +
    "\uffc9\030\uffc9\033\uffc9\034\uffc9\036\uffc9\001\002\000\026" +
    "\012\040\015\055\027\046\035\056\050\045\054\042\055" +
    "\051\056\041\057\044\060\050\001\002\000\014\004\uffe0" +
    "\014\uffe0\017\uffe0\034\uffe0\036\uffe0\001\002\000\026\012" +
    "\040\015\055\027\046\035\056\050\045\054\042\055\051" +
    "\056\041\057\044\060\050\001\002\000\026\012\040\015" +
    "\055\027\046\035\056\050\045\054\042\055\051\056\041" +
    "\057\044\060\050\001\002\000\022\004\uffdc\014\uffdc\017" +
    "\uffdc\020\142\022\144\025\145\034\uffdc\036\uffdc\001\002" +
    "\000\014\004\uffdd\014\uffdd\017\uffdd\034\uffdd\036\uffdd\001" +
    "\002\000\022\004\uffdc\014\uffdc\017\uffdc\020\142\022\144" +
    "\025\145\034\uffdc\036\uffdc\001\002\000\014\004\uffdf\014" +
    "\uffdf\017\uffdf\034\uffdf\036\uffdf\001\002\000\022\004\uffdc" +
    "\014\uffdc\017\uffdc\020\142\022\144\025\145\034\uffdc\036" +
    "\uffdc\001\002\000\014\004\uffde\014\uffde\017\uffde\034\uffde" +
    "\036\uffde\001\002\000\036\004\uffc8\010\uffc8\011\uffc8\012" +
    "\uffc8\013\uffc8\014\uffc8\017\uffc8\020\uffc8\022\uffc8\025\uffc8" +
    "\030\uffc8\033\uffc8\034\uffc8\036\uffc8\001\002\000\032\004" +
    "\uffd2\010\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\017\uffd2" +
    "\020\uffd2\022\uffd2\025\uffd2\034\uffd2\036\uffd2\001\002\000" +
    "\026\012\040\015\055\027\046\035\056\050\045\054\042" +
    "\055\051\056\041\057\044\060\050\001\002\000\004\017" +
    "\160\001\002\000\014\006\030\027\025\031\032\051\027" +
    "\052\031\001\002\000\004\005\162\001\002\000\014\006" +
    "\030\027\025\031\032\051\027\052\031\001\002\000\022" +
    "\005\uffe8\006\uffe8\027\uffe8\031\uffe8\032\uffe8\047\uffe8\051" +
    "\uffe8\052\uffe8\001\002\000\026\012\040\015\055\027\046" +
    "\035\056\050\045\054\042\055\051\056\041\057\044\060" +
    "\050\001\002\000\004\017\166\001\002\000\014\006\030" +
    "\027\025\031\032\051\027\052\031\001\002\000\022\005" +
    "\uffe7\006\uffe7\027\uffe7\031\uffe7\032\uffe7\047\uffe7\051\uffe7" +
    "\052\uffe7\001\002\000\004\032\171\001\002\000\006\002" +
    "\ufffd\037\ufffd\001\002\000\026\012\040\015\055\027\046" +
    "\035\056\050\045\054\042\055\051\056\041\057\044\060" +
    "\050\001\002\000\026\012\040\015\055\027\046\035\056" +
    "\050\045\054\042\055\051\056\041\057\044\060\050\001" +
    "\002\000\004\034\175\001\002\000\004\026\176\001\002" +
    "\000\026\012\040\015\055\027\046\035\056\050\045\054" +
    "\042\055\051\056\041\057\044\060\050\001\002\000\004" +
    "\014\200\001\002\000\022\005\uffe4\006\uffe4\027\uffe4\031" +
    "\uffe4\032\uffe4\047\uffe4\051\uffe4\052\uffe4\001\002\000\004" +
    "\014\202\001\002\000\022\005\uffe5\006\uffe5\027\uffe5\031" +
    "\uffe5\032\uffe5\047\uffe5\051\uffe5\052\uffe5\001\002\000\004" +
    "\002\000\001\002\000\006\002\ufffe\037\205\001\002\000" +
    "\004\027\206\001\002\000\006\031\210\045\207\001\002" +
    "\000\004\027\253\001\002\000\014\027\ufff9\032\ufff9\040" +
    "\ufff9\046\ufff9\050\ufff9\001\002\000\014\027\217\032\ufff6" +
    "\040\213\046\212\050\221\001\002\000\004\027\uffec\001" +
    "\002\000\010\027\217\046\212\050\221\001\002\000\024" +
    "\006\ufffa\027\ufffa\031\ufffa\032\ufffa\040\ufffa\046\ufffa\050" +
    "\ufffa\051\ufffa\052\ufffa\001\002\000\004\027\226\001\002" +
    "\000\006\032\ufff6\040\213\001\002\000\004\027\uffea\001" +
    "\002\000\004\032\224\001\002\000\006\027\uffeb\033\222" +
    "\001\002\000\004\032\223\001\002\000\004\027\uffed\001" +
    "\002\000\006\002\ufffc\037\ufffc\001\002\000\004\032\ufff7" +
    "\001\002\000\004\014\227\001\002\000\024\006\ufff8\027" +
    "\ufff8\031\ufff8\032\ufff8\040\ufff8\046\ufff8\050\ufff8\051\ufff8" +
    "\052\ufff8\001\002\000\004\027\231\001\002\000\004\015" +
    "\232\001\002\000\012\017\246\027\217\046\212\050\221" +
    "\001\002\000\004\031\234\001\002\000\020\006\ufff9\027" +
    "\ufff9\031\ufff9\046\ufff9\050\ufff9\051\ufff9\052\ufff9\001\002" +
    "\000\020\006\030\027\236\031\032\046\212\050\221\051" +
    "\027\052\031\001\002\000\010\026\172\027\uffea\033\173" +
    "\001\002\000\004\047\240\001\002\000\026\012\040\015" +
    "\055\027\046\035\056\050\045\054\042\055\051\056\041" +
    "\057\044\060\050\001\002\000\004\014\242\001\002\000" +
    "\004\032\243\001\002\000\006\032\ufff5\040\ufff5\001\002" +
    "\000\004\017\252\001\002\000\004\027\251\001\002\000" +
    "\004\031\ufff0\001\002\000\012\017\ufff1\027\217\046\212" +
    "\050\221\001\002\000\004\017\ufff2\001\002\000\012\017" +
    "\uffee\027\uffee\046\uffee\050\uffee\001\002\000\004\031\uffef" +
    "\001\002\000\004\031\254\001\002\000\014\027\ufff9\032" +
    "\ufff9\040\ufff9\046\ufff9\050\ufff9\001\002\000\014\027\217" +
    "\032\ufff6\040\213\046\212\050\221\001\002\000\004\032" +
    "\257\001\002\000\006\002\ufffb\037\ufffb\001\002\000\004" +
    "\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\256\000\006\002\005\003\003\001\001\000\006\004" +
    "\203\021\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\032\024\033\001\001\000\006\011\032\024" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\052\013\053\014\042\015\056\016" +
    "\051\017\046\001\001\000\006\016\154\017\046\001\001" +
    "\000\004\030\153\001\001\000\002\001\001\000\004\031" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\115\001\001\000\002\001\001" +
    "\000\004\034\107\001\001\000\016\012\067\013\053\014" +
    "\042\015\056\016\051\017\046\001\001\000\006\016\066" +
    "\017\046\001\001\000\004\032\057\001\001\000\002\001" +
    "\001\000\010\015\064\016\051\017\046\001\001\000\010" +
    "\015\062\016\051\017\046\001\001\000\004\032\063\001" +
    "\001\000\002\001\001\000\004\032\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\075\001\001\000\004\030\105\001" +
    "\001\000\020\012\100\013\053\014\042\015\056\016\051" +
    "\017\046\020\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\012\100\013\053\014\042" +
    "\015\056\016\051\017\046\020\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\013\110" +
    "\014\042\015\056\016\051\017\046\001\001\000\002\001" +
    "\001\000\004\034\111\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\121\017\046\001" +
    "\001\000\002\001\001\000\006\016\117\017\046\001\001" +
    "\000\004\033\120\001\001\000\002\001\001\000\004\033" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\126\013\053\014\042\015\056\016" +
    "\051\017\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\030\132\001\001\000\002\001" +
    "\001\000\016\012\136\013\053\014\042\015\056\016\051" +
    "\017\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\151\015\056\016\051\017\046\001\001\000\002\001" +
    "\001\000\012\014\147\015\056\016\051\017\046\001\001" +
    "\000\012\014\145\015\056\016\051\017\046\001\001\000" +
    "\004\031\146\001\001\000\002\001\001\000\004\031\150" +
    "\001\001\000\002\001\001\000\004\031\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\156\013\053\014\042\015\056\016\051\017\046\001" +
    "\001\000\002\001\001\000\004\011\160\001\001\000\002" +
    "\001\001\000\004\011\162\001\001\000\002\001\001\000" +
    "\016\012\164\013\053\014\042\015\056\016\051\017\046" +
    "\001\001\000\002\001\001\000\004\011\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\200\013\053\014\042\015\056\016\051\017\046\001" +
    "\001\000\016\012\173\013\053\014\042\015\056\016\051" +
    "\017\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\012\176\013\053\014\042\015\056\016\051\017\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\203" +
    "\021\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\210\001\001\000\012\005\213" +
    "\006\215\010\214\023\217\001\001\000\002\001\001\000" +
    "\004\010\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\215\023\224\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\232" +
    "\001\001\000\010\007\246\010\244\025\243\001\001\000" +
    "\002\001\001\000\004\022\234\001\001\000\010\005\213" +
    "\010\214\011\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\240\013\053\014\042\015\056\016\051" +
    "\017\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\007\246\010\244\025\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\254\001\001\000\012\005\213\006" +
    "\215\010\214\023\255\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MiniJavaParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MiniJavaParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MiniJavaParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String arvore;

    public String getArvore() {
        return arvore;
    }
    
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Erro");
        m.append(" : ").append(message);
        System.err.println(m);
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    public void syntax_error(Symbol s){ 
        System.err.println("Erro de sintaxe no token "+s.value); 
    }

    /*public static  void main(String[] args){
        try {
            Reader leitor = new InputStreamReader(new FileInputStream(args[0]));               
            parser = new MiniJavaParser(new MiniJavaLexer(leitor));
            //MiniJavaParser parser = new MiniJavaParser(new MiniJavaLexer(new FileReader(args[0])));
            Object result = parser.parse().value;
            System.out.println("*** Resultados finais ***");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }*/

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MiniJavaParser$actions {
  private final MiniJavaParser parser;

  /** Constructor */
  CUP$MiniJavaParser$actions(MiniJavaParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MiniJavaParser$do_action(
    int                        CUP$MiniJavaParser$act_num,
    java_cup.runtime.lr_parser CUP$MiniJavaParser$parser,
    java.util.Stack            CUP$MiniJavaParser$stack,
    int                        CUP$MiniJavaParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MiniJavaParser$result;

      /* select the action based on the action number */
      switch (CUP$MiniJavaParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // exps ::= exp VIR exps 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int virleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int virright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Token vir = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node exps = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		   
            //exps.addChildren(exp);  
            //exps.addChildren(vir);  
            RESULT = exps;  
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exps",14, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // exps ::= exp 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		   
            RESULT = exp;  
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exps",14, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // pexpempty ::= 
            {
              Node RESULT =null;

              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("pexpempty",21, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // pexpempty ::= LEFT_PAREN exps RT_PAREN 
            {
              Node RESULT =null;
		int apaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int aparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Token apa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int expsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int expsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node exps = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int fpaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int fparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token fpa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		   
            //pexpempty.addChildren(exps);  
            //RESULT = pexpempty;  
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("pexpempty",21, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // pexpempty ::= LEFT_PAREN RT_PAREN 
            {
              Node RESULT =null;
		int apaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int aparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Token apa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int fpaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int fparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token fpa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		        
            //RESULT = pexpempty;  
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("pexpempty",21, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // pexpline ::= VOID 
            {
              Node RESULT =null;

              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("pexpline",22, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // pexpline ::= PTO IDENT pexpempty pexpline 
            {
              Node RESULT =null;
		int ptoleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int ptoright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Token pto = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int pexpemptyleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int pexpemptyright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node pexpempty = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int pexplineleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int pexplineright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node pexpline = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		   
            //pexpline.addChildren(pto); 
            //pexpline.addChildren(id); 
            //pexpline.addChildren(pexpempty);     
            RESULT = pexpline;  
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("pexpline",22, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // pexp ::= LEFT_PAREN exp RT_PAREN pexpline 
            {
              Node RESULT =null;
		int apaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int aparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Token apa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int fpaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int fparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Token fpa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int pexplineleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int pexplineright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node pexpline = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		               
            //pexpline.addChildren(exp);   
            RESULT = pexpline;  
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("pexp",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // pexp ::= NEW IDENT LEFT_PAREN RT_PAREN pexpline 
            {
              Node RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int neright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Token ne = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int apaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int aparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Token apa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int fpaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int fparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Token fpa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int pexplineleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int pexplineright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node pexpline = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		   
            //pexpline.addChildren(ne);  
            //pexpline.addChildren(id);   
            RESULT = pexpline;  
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("pexp",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // pexp ::= THI pexpline 
            {
              Node RESULT =null;
		int thileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int thiright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Token thi = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int pexplineleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int pexplineright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node pexpline = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		        
            //pexpline.addChildren(thi);  
            RESULT = pexpline;  
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("pexp",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // pexp ::= IDENT pexpline 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int pexplineleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int pexplineright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node pexpline = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		        
            //pexpline.addChildren(id);  
            RESULT = pexpline;  
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("pexp",13, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sexp ::= pexp 
            {
              Node RESULT =null;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node pexp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		                      
            RESULT = pexp;  
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("sexp",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sexp ::= pexp ACO exp FCO 
            {
              Node RESULT =null;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Node pexp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int acoleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int acoright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Token aco = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int fcoleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int fcoright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token fco = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		          
            //pexp.addChildren(exp);  
            RESULT = pexp;  
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("sexp",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sexp ::= pexp PTO LEN 
            {
              Node RESULT =null;
		int pexpleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int pexpright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Node pexp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int ptoleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int ptoright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Token pto = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int lenleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int lenright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token len = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //pexp.addChildren(pto);            
            //pexp.addChildren(len);  
            RESULT = pexp;  
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("sexp",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sexp ::= NEW INT ACO exp FCO 
            {
              Node RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int neright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Token ne = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int acoleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int acoright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Token aco = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int fcoleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int fcoright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token fco = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //sexp.addChildren(ne);            
            //sexp.addChildren(i);  
            //sexp.addChildren(exp);  
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("sexp",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sexp ::= NUL 
            {
              Node RESULT =null;
		int nulleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int nulright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token nul = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //sexp.addChildren(nul);            
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("sexp",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sexp ::= INT 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //sexp.addChildren(i);            
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("sexp",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sexp ::= FAL 
            {
              Node RESULT =null;
		int falleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int falright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token fal = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //sexp.addChildren(fal);            
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("sexp",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sexp ::= TRU 
            {
              Node RESULT =null;
		int truleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int truright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token tru = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //sexp.addChildren(tru);            
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("sexp",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sexp ::= MINUS sexp 
            {
              Node RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Token minus = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int sexpleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int sexpright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node sexp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //sexp.addChildren(minus);
            RESULT = sexp;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("sexp",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // sexp ::= NEG sexp 
            {
              Node RESULT =null;
		int negleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int negright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Token neg = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int sexpleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int sexpright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node sexp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //sexp.addChildren(neg);
            RESULT = sexp;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("sexp",12, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // mexpline ::= 
            {
              Node RESULT =null;

              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("mexpline",25, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // mexpline ::= DIVIDE sexp mexpline 
            {
              Node RESULT =null;
		int dividesleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int dividesright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Token divides = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int sexpleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int sexpright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node sexp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int mexplineleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int mexplineright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node mexpline = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //mexpline.addChildren(divides);
            //mexpline.addChildren(sexp);
            RESULT = mexpline;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("mexpline",25, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // mexpline ::= TIMES sexp mexpline 
            {
              Node RESULT =null;
		int timesleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int timesright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Token times = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int sexpleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int sexpright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node sexp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int mexplineleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int mexplineright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node mexpline = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //mexpline.addChildren(times);
            //mexpline.addChildren(sexp);
            RESULT = mexpline;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("mexpline",25, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // mexp ::= sexp mexpline 
            {
              Node RESULT =null;
		int sexpleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int sexpright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node sexp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int mexplineleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int mexplineright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node mexpline = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //sexp.addChildren(mexpline);                        
            RESULT = sexp;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("mexp",11, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // aexpline ::= 
            {
              Node RESULT =null;

              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("aexpline",24, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // aexpline ::= MINUS mexp aexpline 
            {
              Node RESULT =null;
		int minusleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int minusright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Token minus = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int mexpleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int mexpright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node mexp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int aexplineleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int aexplineright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node aexpline = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //aexpline.addChildren(minus);
            //1aexpline.addChildren(mexp);
            RESULT = aexpline;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("aexpline",24, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // aexpline ::= PLUS mexp aexpline 
            {
              Node RESULT =null;
		int plusleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int plusright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Token plus = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int mexpleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int mexpright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node mexp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int aexplineleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int aexplineright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node aexpline = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //aexpline.addChildren(plus);
            //aexpline.addChildren(mexp);
            RESULT = aexpline;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("aexpline",24, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // aexp ::= mexp aexpline 
            {
              Node RESULT =null;
		int mexpleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int mexpright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node mexp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int aexplineleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int aexplineright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node aexpline = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //mexp.addChildren(aexpline);                        
            RESULT = mexp;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("aexp",10, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // rexpline ::= 
            {
              Node RESULT =null;

              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("rexpline",23, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // rexpline ::= NOT_EQ aexp rexpline 
            {
              Node RESULT =null;
		int neqleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int neqright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Token neq = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int aexpleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int aexpright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node aexp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int rexplineleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int rexplineright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node rexpline = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //rexpline.addChildren(neq);
            //rexpline.addChildren(aexp);
            RESULT = rexpline;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("rexpline",23, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // rexpline ::= EQ aexp rexpline 
            {
              Node RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Token eq = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int aexpleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int aexpright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node aexp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int rexplineleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int rexplineright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node rexpline = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //rexpline.addChildren(eq);
            //rexpline.addChildren(aexp);
            RESULT = rexpline;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("rexpline",23, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // rexpline ::= LESS aexp rexpline 
            {
              Node RESULT =null;
		int lessleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int lessright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Token less = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int aexpleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int aexpright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node aexp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int rexplineleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int rexplineright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node rexpline = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //rexpline.addChildren(less);
            //rexpline.addChildren(aexp);
            RESULT = rexpline;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("rexpline",23, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // rexp ::= aexp rexpline 
            {
              Node RESULT =null;
		int aexpleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int aexpright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node aexp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int rexplineleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int rexplineright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node rexpline = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //aexp.addChildren(rexpline);            
            RESULT = aexp;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("rexp",9, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expline ::= 
            {
              Node RESULT =null;

              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expline",26, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expline ::= AND rexp expline 
            {
              Node RESULT =null;
		int anleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int anright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Token an = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int rexpleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int rexpright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node rexp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int explineleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int explineright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node expline = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //expline.addChildren(an);
            //expline.addChildren(rexp);
            RESULT = expline;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("expline",26, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= rexp expline 
            {
              Node RESULT =null;
		int rexpleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int rexpright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node rexp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int explineleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int explineright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node expline = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            //rexp.addChildren(expline);
            RESULT = rexp;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cmd ::= IDENT ACO exp FCO ASSMNT exp SEMI 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).value;
		int acoleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int acoright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		Token aco = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int fcoleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int fcoright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Token fco = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int assmntleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int assmntright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Token assmnt = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token semi = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            Node node = new Node(id);
            //node.addChildren(exp);
            node.addChildren(assmnt);
            //node.addChildren(exp2);
            RESULT = node;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("cmd",7, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cmd ::= IDENT ASSMNT exp SEMI 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int assmntleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int assmntright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Token assmnt = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token semi = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            Node node = new Node(id);
            node.addChildren(assmnt);
            //node.addChildren(exp);
            RESULT = node;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("cmd",7, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cmd ::= SOP LEFT_PAREN exp RT_PAREN SEMI 
            {
              Node RESULT =null;
		int sopleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int sopright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Token sop = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int apaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int aparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Token apa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int fpaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int fparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Token fpa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token semi = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            Node node = new Node(sop);   
            node.addChildren(apa);       
            //node.addChildren(exp);
            node.addChildren(fpa);  
            RESULT = node;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("cmd",7, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cmd ::= WHI LEFT_PAREN exp RT_PAREN cmd 
            {
              Node RESULT =null;
		int whileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int whiright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Token whi = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int apaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int aparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Token apa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int fpaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int fparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Token fpa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node cmd = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            Node node = new Node(whi);
            //node.addChildren(exp);
            node.addChildren(cmd);
            RESULT = node;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("cmd",7, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cmd ::= IF LEFT_PAREN exp RT_PAREN cmd ELSE cmd 
            {
              Node RESULT =null;
		int ifsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).left;
		int ifsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).right;
		Token ifs = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).value;
		int apaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int aparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		Token apa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int fpaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int fparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Token fpa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int cmd1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int cmd1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Node cmd1 = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int elsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int elsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Token els = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int cmd2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int cmd2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node cmd2 = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            Node node = new Node(ifs);
            //node.addChildren(exp);
            node.addChildren(cmd1);
            node.addChildren(els);
            node.addChildren(cmd2);
            RESULT = node;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("cmd",7, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cmd ::= ACH cmdlist FCH 
            {
              Node RESULT =null;
		int achleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int achright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Token ach = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int cmdlistleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int cmdlistright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node cmdlist = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int fchleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int fchright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token fch = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		            
            RESULT = cmdlist;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("cmd",7, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo ::= IDENT 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		              
            RESULT = new Node(id);   
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipo ::= INT 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		              
            RESULT = new Node(i);   
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // tipo ::= BOO 
            {
              Node RESULT =null;
		int booleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int booright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token boo = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		              
            RESULT = new Node(boo);   
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // tipo ::= INT ACO FCH 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int acoleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int acoright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Token aco = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int fchleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int fchright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token fch = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		              
            RESULT = new Node(i);   
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("tipo",6, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // params ::= tipo IDENT 
            {
              Node RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node tipo = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		    
            tipo.addChildren(id);
            RESULT = tipo;   
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("params",5, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // paramsmetodo ::= LEFT_PAREN paramslist RT_PAREN 
            {
              Node RESULT =null;
		int apaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int aparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Token apa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int paramslistleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int paramslistright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node paramslist = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int fpaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int fparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token fpa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		              
            RESULT = paramslist;   
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("paramsmetodo",20, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // paramsmetodo ::= LEFT_PAREN RT_PAREN 
            {
              Node RESULT =null;
		int apaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int aparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Token apa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int fpaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int fparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token fpa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;

              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("paramsmetodo",20, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramslist ::= params 
            {
              Node RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node params = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		              
            RESULT = params;   
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("paramslist",19, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramslist ::= params paramslist 
            {
              Node RESULT =null;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node params = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int paramslistleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int paramslistright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node paramslist = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		              
            paramslist.addChildren(params);
            RESULT = paramslist;   
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("paramslist",19, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cmdlist ::= 
            {
              Node RESULT =null;

              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("cmdlist",18, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // cmdlist ::= cmd cmdlist 
            {
              Node RESULT =null;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node cmd = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int cmdlistleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int cmdlistright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node cmdlist = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		              
            cmdlist.addChildren(cmd);
            RESULT = cmdlist;   
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("cmdlist",18, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // metodo ::= PUB tipo IDENT paramsmetodo ACH varlist cmd RET exp SEMI FCH 
            {
              Node RESULT =null;
		int publeft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).left;
		int pubright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).right;
		Token pub = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-9)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-9)).right;
		Node tipo = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-9)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).value;
		int paramsmetodoleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-7)).left;
		int paramsmetodoright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-7)).right;
		Node paramsmetodo = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-7)).value;
		int achleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).left;
		int achright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).right;
		Token ach = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		Node varlist = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Node cmd = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Token ret = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Token semi = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int fchleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int fchright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token fch = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            Node node = new Node(id1);
            node.addChildren(pub);
            node.addChildren(tipo);
            node.addChildren(id1);
            node.addChildren(paramsmetodo);
            node.addChildren(ach);
            node.addChildren(varlist);
            node.addChildren(cmd);
            node.addChildren(ret);
            //node.addChildren(exp);
            node.addChildren(semi);
            node.addChildren(fch);
            RESULT = node;
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("metodo",4, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // metodolist ::= 
            {
              Node RESULT =null;

              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("metodolist",17, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // metodolist ::= metodo metodolist 
            {
              Node RESULT =null;
		int metodoleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int metodoright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node metodo = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int metodolistleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int metodolistright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node metodolist = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		             
            metodolist.addChildren(metodo);
            RESULT = metodolist;   
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("metodolist",17, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var ::= tipo IDENT SEMI 
            {
              Node RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Node tipo = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int semileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int semiright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token semi = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		            
            //tipo.addChildren(tipo);
            //tipo.addChildren(id);
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("var",3, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varlist ::= 
            {
              Node RESULT =null;

              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("varlist",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // varlist ::= varlist var 
            {
              Node RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node varlist = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node var = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		             
            //varlist.addChildren(var);
            RESULT = varlist;   
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("varlist",16, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // classe ::= CLA IDENT EXT IDENT ACH varlist metodolist FCH 
            {
              Node RESULT =null;
		int clasleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-7)).left;
		int clasright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-7)).right;
		Token clas = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		Token ext = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int achleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int achright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Token ach = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Node varlist = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int metodolistleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int metodolistright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node metodolist = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int fchleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int fchright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token fch = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            Node node = new Node(clas);
            node.addChildren(id2);
            node.addChildren(id);
            node.addChildren(varlist);
            node.addChildren(metodolist);
            RESULT = node;
            System.out.println("Adicionando..." + node);
            this.arvore += node;
            System.out.println("Imprimindo..." + this.arvore);
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("classe",2, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-7)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // classe ::= CLA IDENT ACH varlist metodolist FCH 
            {
              Node RESULT =null;
		int clasleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int clasright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		Token clas = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int achleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int achright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Token ach = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Node varlist = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int metodolistleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int metodolistright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node metodolist = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int fchleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int fchright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token fch = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            Node node = new Node(clas);
            node.addChildren(id1);
            node.addChildren(ach);
            node.addChildren(varlist);
            node.addChildren(metodolist);
            node.addChildren(fch);
            RESULT = node;
            System.out.println("Adicionando..." + node);
            this.arvore += node;
            System.out.println("Imprimindo..." + this.arvore);
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("classe",2, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main ::= CLA IDENT ACH PUB STA VOI MAI LEFT_PAREN STR ACO FCO IDENT RT_PAREN ACH cmd FCH FCH 
            {
              Node RESULT =null;
		int clasleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-16)).left;
		int clasright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-16)).right;
		Token clas = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-16)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-15)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-15)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-15)).value;
		int ach1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-14)).left;
		int ach1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-14)).right;
		Token ach1 = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-14)).value;
		int publileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-13)).left;
		int publiright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-13)).right;
		Token publi = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-13)).value;
		int statileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-12)).left;
		int statiright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-12)).right;
		Token stati = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-12)).value;
		int voileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-11)).left;
		int voiright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-11)).right;
		Token voi = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-11)).value;
		int maileft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).left;
		int mairight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).right;
		Token mai = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-10)).value;
		int apaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-9)).left;
		int aparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-9)).right;
		Token apa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-9)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).right;
		Token str = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-8)).value;
		int acoleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-7)).left;
		int acoright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-7)).right;
		Token aco = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-7)).value;
		int fcoleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).left;
		int fcoright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).right;
		Token fco = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-6)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-5)).value;
		int fpaleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).left;
		int fparight = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).right;
		Token fpa = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-4)).value;
		int ach2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).left;
		int ach2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).right;
		Token ach2 = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-3)).value;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).right;
		Node cmd = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-2)).value;
		int fch1left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int fch1right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Token fch1 = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int fch2left = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int fch2right = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Token fch2 = (Token)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		
            Node node = new Node(clas);            
            node.addChildren(id1);
            node.addChildren(ach1);
            node.addChildren(publi);
            node.addChildren(stati);
            node.addChildren(voi);
            node.addChildren(mai);
            node.addChildren(apa);
            node.addChildren(str);
            node.addChildren(aco);
            node.addChildren(fco);
            node.addChildren(id2);
            node.addChildren(fpa);
            node.addChildren(ach2);
            node.addChildren(cmd);
            node.addChildren(fch1);
            node.addChildren(fch2);
            RESULT = node;
            System.out.println("Adicionando..." + node);
            this.arvore += node;
            System.out.println("Imprimindo..." + this.arvore);
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("main",1, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-16)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classlist ::= 
            {
              Node RESULT =null;

              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("classlist",15, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // classlist ::= classe classlist 
            {
              Node RESULT =null;
		int classeleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int classeright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node classe = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int classlistleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int classlistright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node classlist = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		             
            classlist.addChildren(classe);
            RESULT = classlist;   
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("classlist",15, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= main classlist 
            {
              Node RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node m = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		int classlistleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).left;
		int classlistright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()).right;
		Node classlist = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.peek()).value;
		 
            m.addChildren(classlist);
            RESULT = m;
            this.arvore = "";            
        
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          return CUP$MiniJavaParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)).value;
		RESULT = start_val;
              CUP$MiniJavaParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.elementAt(CUP$MiniJavaParser$top-1)), ((java_cup.runtime.Symbol)CUP$MiniJavaParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MiniJavaParser$parser.done_parsing();
          return CUP$MiniJavaParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

